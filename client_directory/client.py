import asyncio
import datetime
from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
import other
from create_bot import bot, dp
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from client_directory import client_kb, client_ikb
from data_base import sqlite


admin_id = '6181965444'


class FSMClient(StatesGroup):
    load_contact_number = State()
    load_address = State()
    load_name = State()
    change_the_quantity = State()
    change_quality_by_order = State()
    create_review = State()


@dp.message_handler(content_types=['photo'])
async def get_photo_id(message: types.Message):
    await message.answer(message.photo[-1].file_id)


async def assess_time(time):
    target_time = datetime.datetime.strptime(time, '%Y-%m-%d %H:%M:%S.%f')
    today = datetime.datetime.today()
    # margin = datetime.timedelta(minutes=1)
    if target_time >= today - datetime.timedelta(minutes=1):
        return '–°–µ–π—á–∞—Å'

    elif target_time.day > int(today.day) - 1:
        return f'–°–µ–≥–æ–¥–Ω—è –≤ {target_time.hour}:{target_time.minute}'

    elif target_time.day > int(today.day) - 2:
        return f'–í—á–µ—Ä–∞ –≤ {target_time.hour}:{target_time.minute}'

    elif target_time.day > int(today.day) - 3:
        return f'–ü–æ–∑–∞–≤—á–µ—Ä–∞ –≤ {target_time.hour}:{target_time.minute}'

    else:
        months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
                  '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
        return f'{target_time.day} {months[target_time.month - 1]}'


# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥
async def func_send_catalog(message):
     await bot.send_message(chat_id=message.from_user.id,
                            text='‚ú®  –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:',
                            reply_markup= await client_ikb.ikb_catalog())


# –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
async def update_info_about_order(user_id, change_quality=None):
    msg_id = await sqlite.loads_message_object_from_data_base(user_id, 'confirm_order_msg')
    info_by_order = await sqlite.select_info_about_order_by_user_id(user_id, all_info=True)
    order_id = info_by_order[0]
    time_change_order = info_by_order[3]
    status_order = info_by_order[4]
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
    info_about_owner_of_order = await sqlite.select_info_about_user_by_user_id(user_id)
    name = info_about_owner_of_order[3]
    contact_number = info_about_owner_of_order[4]
    address = info_about_owner_of_order[5]
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–º–µ—Ä - (–°–µ–π—á–∞—Å, –ø–æ–∑–∞–≤—á–µ—Ä–∞, 3 –∏—é–Ω—è)
    time_change_order = await assess_time(time_change_order)
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –∑–∞–∫–∞–∑–∞
    info_by_selected_item_in_order = await order_view_text(user_id, for_confirm_order=True)
    sum_order = info_by_selected_item_in_order[0]
    status_order = await assess_status(status_order)
    # –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∏–∑–º–µ–Ω—è–µ–º –µ—ë
    if contact_number is None or contact_number == '':
        contact_number = '<u>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω</u>'

    if name is None or name == '':
        name = '<u>–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ</u>'

    if address is None or address == '':
        address = '<u>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω</u>'
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç
    result_text = f'''
                               –ó–∞–∫–∞–∑ #{order_id} - {time_change_order}
            {sum_order} —Ä.
    <u>{status_order}</u> ‚è± {time_change_order}

    üìû {contact_number}
    üôãüèª {name}
    üè° {address}
    '''
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    for item in info_by_selected_item_in_order[1:]:
        result_text += item
    if not change_quality:
        reply_markup = await client_ikb.add_info_in_profile(order_id)
    else:
        reply_markup = await client_ikb.change_quality(order_id, user_id)
    try:
        await bot.edit_message_text(chat_id=user_id,
                                        message_id=msg_id,
                                        text=result_text,
                                        parse_mode='HTML',
                                        reply_markup=reply_markup)
    except: pass


status_name_in_russian = {
    'active': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    'completed': '–ó–∞–≤–µ—Ä—à—ë–Ω',
    'in_delivery': '–í –¥–æ—Å—Ç–∞–≤–∫–µ',
    'canceled': '–û—Ç–º–µ–Ω—ë–Ω',
    'verification_by_admin': '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –º–∞–≥–∞–∑–∏–Ω–∞',
    'paid': '–û–ø–ª–∞—á–µ–Ω',

}


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
async def assess_status(status_order):
    return status_name_in_russian.get(status_name_in_russian[status_order], '–Ω–µ –æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å') 


# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—è—é—â–µ–π—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
# –∏–∑ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
async def func_vitrina(message):
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    product_id = other.Vetrina.photolist[-1]['product_id']
    product_name = await sqlite.select_name_product_by_id(product_id)
    product_price = await sqlite.select_lowest_price_for_product_by_id(product_id)
    message_object = await bot.send_photo(chat_id=message.from_user.id,
                            photo=other.Vetrina.photolist[-1]['photo'],
                            reply_markup=await client_ikb.ikb_random(product_name, product_price))

    send_catalog = False

    for a in range(20):
        if not send_catalog:
            await func_send_catalog(message)
            send_catalog = True

        for item in other.Vetrina.photolist:
            await asyncio.sleep(3)
            product_id = item['product_id']
            product_name = await sqlite.select_name_product_by_id(product_id)
            product_price = await sqlite.select_lowest_price_for_product_by_id(product_id)
            photo = types.InputMediaPhoto(item['photo'])
            try:
                await bot.edit_message_media(message_id=message_object.message_id,
                                            chat_id=message.from_user.id,
                                            media=photo,
                                            reply_markup=await client_ikb.ikb_random(product_name, product_price))
            except: pass


# –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def func_start_command(message):
    #await bot.send_photo(chat_id=message.from_user.id,
    #                     photo=other.start_message['photo'],
    #                     caption=other.start_message['desc'],
    #                     reply_markup=client_kb.main_kb())
    await func_vitrina(message)
    paid_orders = await sqlite.checking_paid_orders(message.from_user.id)
    if paid_orders:
        await bot.send_message(chat_id=message.from_user.id,
                               text='–£ –≤–∞—Å –µ—Å—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑, –µ—Å–ª–∏ –≤—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª–∏ –∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.',
                               reply_markup=await client_ikb.start_get_received_order())


# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
async def func_view_price_list():
    result_str = ''
    categories_list = await sqlite.select_all_id_categories()
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    for category_id in categories_list:
        category_name = await sqlite.select_name_category_by_id(category_id)
        result_str = result_str + f'\n{category_name}'
        products_list = await sqlite.select_all_product_for_category(category_id)
        for product_name in products_list:
            result_str = result_str + f'\n    {product_name}'
            product_id = await sqlite.select_id_by_product(product_name)
            values_list = await sqlite.select_all_price_by_product_id(product_id)
            for value in values_list:
                result_str = result_str + f'\n        {value[0]} - {value[1]} —Ä.'

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–µ–π —Ç–µ–∫—Å—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
    return result_str


# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def func_view_chapter(data, callback: types.CallbackQuery):
    category_id = data.split('_')
    category_id = category_id[1]
    category_name = await sqlite.select_name_category_by_id(category_id)
    await bot.send_message(chat_id=callback.from_user.id,
                           text=category_name,
                           reply_markup= await client_ikb.ikb_product_in_category(category_id))


# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ü–µ–Ω –≤ —Ç–æ–≤–∞—Ä–µ
async def func_view_price_for_product(data, callback: types.CallbackQuery):
    product_id = data.split('_')
    product_id = product_id[1]
    product_name = await sqlite.select_name_product_by_id(product_id)
    await bot.send_message(chat_id=callback.from_user.id,
                           text=product_name,
                           reply_markup= await client_ikb.ikb_all_price_for_product(product_id))


# –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ user_id
async def order_view_text(user_id, for_confirm_order=False, paid_order=False):
    dict_of_selected = await sqlite.select_info_about_order_by_user_id(user_id)
    if paid_order is True:
        dict_of_selected = await sqlite.select_info_about_order_by_user_id(user_id, paid_order=True)

    res_str = ''
    # –ù–∞—Ö–æ–¥–∏–º —Å—É–º–º—É –≤—Å–µ–π –∫–æ—Ä–∑–∏–Ω—ã
    sum_order = 0
    for item in dict_of_selected:
        price = await sqlite.select_price_by_volume_id(item)
        price = int(price) * int(dict_of_selected[item])
        print(price, int(dict_of_selected[item]))
        sum_order += price
    res_str += f'üõí  –ö–æ—Ä–∑–∏–Ω–∞ ‚Äì {sum_order} —Ä.'
    count = 1
    if for_confirm_order:
        res_lst = [sum_order]
        for item in dict_of_selected:
            price = await sqlite.select_price_by_volume_id(item)
            quantity = dict_of_selected[item]
            product_id = await sqlite.select_product_id_by_volume_id(item)
            product_name = await sqlite.select_name_product_by_id(product_id)
            volume = await sqlite.select_volume_by_volume_id(item)
            if int(quantity) == 1:
                res_lst.append(f'\n\n{count}. {product_name}\n            {volume}\n      {price} —Ä.')
            else:
                res_lst.append(f'\n\n{count}. {product_name}\n            {volume}\n      {price} —Ä. x {quantity} = {int(price) * int(quantity)}')
            count += 1
        return res_lst

    for item in dict_of_selected:
        price = await sqlite.select_price_by_volume_id(item)
        quantity = dict_of_selected[item]
        product_id = await sqlite.select_product_id_by_volume_id(item)
        product_name = await sqlite.select_name_product_by_id(product_id)
        volume = await sqlite.select_volume_by_volume_id(item)
        if int(quantity) == 1:
            res_str += f'\n\n{count}. {product_name}\n            {volume}\n      {price} —Ä.'
        else:
            res_str += f'\n\n{count}. {product_name}\n            {volume}\n      {price} —Ä. x {quantity} = {int(price) * int(quantity)}'
        count += 1
    return res_str


# –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—é –∏ –∫–Ω–æ–ø–∫–∏ "–í –∫–æ—Ä–∑–∏–Ω—É" "–ù–∞–∑–∞–¥"
async def func_product_packaging(data, callback: types.CallbackQuery):
    data = data.split('_')
    volume_id = data[1]
    info_list = await sqlite.select_info_by_volume_id(volume_id)
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'<b>{info_list[0]}</b>\n\n{info_list[1]}  ‚Äîüí∞ {info_list[2]} —Ä.',
                           reply_markup=await client_ikb.ikb_product_packing(volume_id),
                           parse_mode='HTML')


async def func_select_reviews(data, callback: types.CallbackQuery, item_id=None):
    '''

    :param data: –≥–¥–µ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –æ—Ç–∑—ã–≤—ã
    :param callback: ---
    :return: —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
    '''
    lst_reviews = []
    print('item_id -', item_id)
    if not data.startswith('reviews'):
        data = f'reviews_{data}'
    if data.startswith('reviews_all') or data.startswith('all') or 'all' in data:
        reviews = await sqlite.viewing_all_reviews()
        lst_reviews = [i for i in reviews]
    elif data.startswith('reviews_category') or data.startswith('category') or 'category' in data:
        reviews = await sqlite.viewing_reviews_in_chapter(item_id)
        lst_reviews = [i for i in reviews]
    elif data.startswith('reviews_product') or data.startswith('product') or 'product' in data:
        reviews = await sqlite.viewing_reviews_by_product(item_id)
        lst_reviews = [i for i in reviews]
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (id —Ç–æ–≤–∞—Ä–∞, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞, –¥–∞—Ç–∞, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    return lst_reviews


# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤
async def func_send_review(lst_review, callback_query, type_review, item_id=None):
    '''

    :param lst_review: —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
    :param callback_query: –∫–∞–ª–±–µ–∫
    :param type_review: all, category, product
    :return: –æ–±—å–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
    '''
    all_count = len(lst_review)
    current_count = str(all_count)[:]
    current_count = int(current_count) - 1
    name_user = lst_review[current_count][4]
    data_reviews = lst_review[current_count][3]
    name_product = lst_review[current_count][1]
    name_product = await sqlite.select_info_by_volume_id(name_product)
    text_reviews = lst_review[current_count][2]
    message_object = await bot.send_message(chat_id=callback_query.from_user.id,
                                            text=f'üìú <b>{name_user}</b>: –û—Ç–∑—ã–≤ –æ –ø—Ä–æ–¥—É–∫—Ç–µ  ¬∑  {data_reviews}\n{text_reviews}\n\n{name_product[0]} {name_product[1]} {name_product[2]}',
                                            reply_markup=await client_ikb.ikb_change_reviews(all_count, current_count + 1, name_product[0], type_review, item_id=item_id),
                                            parse_mode='HTML')
    return message_object


@dp.message_handler(Text(equals='–í–æ–ø—Ä–æ—Å—ã'))
async def send_ask(message: types.Message):
    await message.answer('''
    1. –ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç?
   - –≠–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—Å—Ç—É–ø–∞–µ—Ç –æ—Ç –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –∏ –ø–æ–¥–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –º–æ—Ç–æ—Ä, –ø—Ä–∏–≤–æ–¥—è—â–∏–π –≤ –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞–¥–Ω–µ–µ –∫–æ–ª–µ—Å–æ.

2. –ö–∞–∫ –¥–æ–ª–≥–æ –º–æ–∂–Ω–æ –µ–∑–¥–∏—Ç—å –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–µ –Ω–∞ –æ–¥–Ω–æ–º –∑–∞—Ä—è–¥–µ?
   - –î–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–Ω–æ–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –≤–∫–ª—é—á–∞—è –º–æ—â–Ω–æ—Å—Ç—å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞, –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —É—Å–ª–æ–≤–∏—è –¥–æ—Ä–æ–≥–∏. –í —Å—Ä–µ–¥–Ω–µ–º, –º–æ–∂–Ω–æ –æ–∂–∏–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 15-30 –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º –∑–∞—Ä—è–¥–µ.

3. –ö–∞–∫ –±—ã—Å—Ç—Ä–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–µ?
   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –µ–≥–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∏ –º–æ—â–Ω–æ—Å—Ç–∏ –º–æ—Ç–æ—Ä–∞. –û–±—ã—á–Ω–æ, —Å–∫–æ—Ä–æ—Å—Ç—å –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å –æ—Ç 20 –¥–æ 50 –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –≤ —á–∞—Å.

4. –ö–∞–∫ –¥–æ–ª–≥–æ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–∞?
   - –í—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –µ–≥–æ –±–∞—Ç–∞—Ä–µ–∏ –∏ –∑–∞—Ä—è–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –û–±—ã—á–Ω–æ, –ø–æ–ª–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 2 –¥–æ 8 —á–∞—Å–æ–≤.

5. –ö–∞–∫–æ–≤—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–∞?
   - –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–∞ –≤–∫–ª—é—á–∞—é—Ç —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å (–Ω–µ –≤—ã–¥–µ–ª—è–µ—Ç –≤—ã–±—Ä–æ—Å—ã –≤—Ä–µ–¥–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤), —ç–∫–æ–Ω–æ–º–∏—é –¥–µ–Ω–µ–≥ –Ω–∞ —Ç–æ–ø–ª–∏–≤–µ, –ª–µ–≥–∫–æ—Å—Ç—å –∏ —É–¥–æ–±—Å—Ç–≤–æ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—É—é –ø–∞—Ä–∫–æ–≤–∫—É –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—Ä–µ–¥–µ –Ω–∞ –¥–∞–ª—å–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏.
    ''')


# –∫–æ–º–∞–Ω–¥–∞ start –∏ –∫–Ω–æ–ø–∫–∞ –ö–∞—Ç–∞–ª–æ–≥
@dp.message_handler(commands='start')
@dp.message_handler(Text(equals='–ö–∞—Ç–∞–ª–æ–≥'))
async def cmd_start(message: types.Message):
    # —Å–æ—Å—Ç–∞–≤–ª—è–µ–º username –ø–æ msg.username
    user_name = message.from_user.username
    # –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º id
    if user_name is None:
        user_name = message.from_user.id

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await sqlite.add_user_in_data_base(message.from_user.id, user_name)
    price_list_str = await func_view_price_list()
    if price_list_str:
        await message.answer(text=price_list_str)

    await func_start_command(message)


# –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@dp.callback_query_handler(text="cancel_load", state='*')
async def cb_cancel_load(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.delete()


# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
@dp.callback_query_handler(text="price-list")
async def cb_send_random_value(callback: types.CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id,
                     text=await func_view_price_list(),
                           parse_mode='HTML')


# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('category_'))
async def cb_chapter(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await func_view_chapter(callback_query.data, callback_query)


# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ü–µ–Ω—ã –æ —Ç–æ–≤–∞—Ä–µ
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('product_'))
async def cb_all_price(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await func_view_price_for_product(callback_query.data, callback_query)


# –Ω–∞—á–∞–ª–æ –∑–∞–Ω–µ—Å–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('pick'))
async def cb_product_packaging(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await func_product_packaging(callback_query.data, callback_query)


# –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã
@dp.callback_query_handler(lambda callback_query: callback_query.data == 'reviews_all')
async def cb_send_review(callback_query: types.CallbackQuery):
    lst_review = await func_select_reviews(callback_query.data, callback_query)
    await callback_query.message.delete()
    message_reviews_object = await func_send_review(lst_review, callback_query, 'all')
    await sqlite.dumps_message_object_in_data_base(callback_query.from_user.id, message_reviews_object.message_id, 'review')


# –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('reviews_category'))
async def cb_send_review(callback_query: types.CallbackQuery):
    lst_review = await func_select_reviews(callback_query.data, callback_query, item_id=callback_query.data.split('_')[-1])
    await callback_query.message.delete()
    message_reviews_object = await func_send_review(lst_review, callback_query, 'category', item_id=callback_query.data.split('_')[-1])
    await sqlite.dumps_message_object_in_data_base(callback_query.from_user.id, message_reviews_object.message_id, 'review')


# –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤—ã –æ –ø—Ä–æ–¥—É–∫—Ç–µ
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('reviews_product'))
async def cb_send_review(callback_query: types.CallbackQuery):
    lst_review = await func_select_reviews(callback_query.data, callback_query, item_id=callback_query.data.split('_')[-1])
    await callback_query.message.delete()
    message_reviews_object = await func_send_review(lst_review, callback_query, 'product', item_id=callback_query.data.split('_')[-1])
    await sqlite.dumps_message_object_in_data_base(callback_query.from_user.id, message_reviews_object.message_id, 'review')


# —Ö–µ–Ω–¥–ª–µ—Ä –∫–∞–ª–±–µ–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('reviews_change'), state='*')
async def cb_change_review(callback_query: types.CallbackQuery, state: FSMContext):
    try: await state.finish()
    except: pass
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –Ω–æ–º–µ—Ä –æ—Ç–∑—ã–≤–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
    if callback_query.data == 'reviews_change_current':
        await callback_query.answer('–í—ã –∏ —Ç–∞–∫ –∑–¥–µ—Å—å')
    else:
        item_id = callback_query.data.split('_')[-3]
        if not item_id.isdigit():
            item_id = None

        type_review = callback_query.data.split('_')[-1]
        message_id = callback_query.message.message_id
        lst_review = await func_select_reviews(callback_query.data, callback_query, item_id)
        # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        all_count = len(lst_review)
        # –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–∑—ã–≤–∞
        count = callback_query.data.split('_')
        count = count[-2]
        count = int(count) - 1
        name_user = lst_review[count][4]
        data_reviews = lst_review[count][3]
        name_product = lst_review[count][1]
        name_product = await sqlite.select_info_by_volume_id(name_product)
        text_reviews = lst_review[count][2]
        # –∏–∑–º–µ–Ω—è–µ–º –æ–±—å–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
        try:
            await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                        text=f'üìú <b>{name_user}</b>: –û—Ç–∑—ã–≤ –æ –ø—Ä–æ–¥—É–∫—Ç–µ  ¬∑  {data_reviews}\n{text_reviews}\n\n{name_product[0]} {name_product[1]} {name_product[2]}',
                                        message_id=message_id,
                                        reply_markup=await client_ikb.ikb_change_reviews(all_count, count + 1, name_product[0], type_review, item_id=item_id),
                                        parse_mode='HTML')
        except: pass


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('back_to_confirm_order'), state='*')
async def back_to_confirm_order(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    msg = await sqlite.loads_message_object_from_data_base(callback_query.from_user.id, 'cancel_change')
    try: await bot.delete_message(chat_id=callback_query.from_user.id,
                            message_id=msg)
    except: pass
    order_id = callback_query.data.split('_')[4]
    await callback_query.message.edit_reply_markup(reply_markup=await client_ikb.add_info_in_profile(order_id))


# –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
@dp.callback_query_handler(text="back to catalog")
async def cb_back_to_catalog(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await func_send_catalog(callback_query)


# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.callback_query_handler(Text(equals='load_contact_number'), state='*')
async def cmd_start_load_contact_number(callback_query: types.CallbackQuery):
    load_contact_number_msg = await bot.send_message(text='‚ùì –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ø—Ä–∏–º–µ—Ä: +79248437263)',
                           chat_id=callback_query.from_user.id,
                           reply_markup= await client_ikb.ikb_cancel())
    await sqlite.dumps_message_object_in_data_base(callback_query.from_user.id, load_contact_number_msg.message_id, 'load_contact_number')
    await FSMClient.load_contact_number.set()


# –í–≤–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(state=FSMClient.load_contact_number)
async def cmd_load_contact_number(message: types.Message, state: FSMContext):
    if message.text.isalpha():
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        return

    await sqlite.update_contact_number_for_user(message.from_user.id, message.text)
    load_contact_number_msg = await sqlite.loads_message_object_from_data_base(message.from_user.id, 'load_contact_number')
    await bot.delete_message(chat_id=message.from_user.id,
                             message_id=load_contact_number_msg)
    await update_info_about_order(message.from_user.id)
    await message.delete()
    await state.finish()


# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏
@dp.callback_query_handler(Text(equals='load_name'), state='*')
async def cmd_start_load_name(callback_query: types.CallbackQuery):
    load_name_msg = await bot.send_message(text='‚ùì –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞–∫–∞–∑–∞',
                                           chat_id=callback_query.from_user.id,
                                           reply_markup=await client_ikb.ikb_cancel())
    await sqlite.dumps_message_object_in_data_base(callback_query.from_user.id, load_name_msg.message_id, 'load_name')
    await FSMClient.load_name.set()


# –í–≤–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@dp.message_handler(state=FSMClient.load_name)
async def cmd_load_name(message: types.Message, state: FSMContext):
    await sqlite.update_name_for_user(message.from_user.id, message.text)
    load_name_msg = await sqlite.loads_message_object_from_data_base(message.from_user.id, 'load_name')
    await bot.delete_message(chat_id=message.from_user.id,
                             message_id=load_name_msg)
    await update_info_about_order(message.from_user.id)
    await message.delete()
    await state.finish()


# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
@dp.callback_query_handler(Text(equals='load_address'), state='*')
async def cmd_start_load_address(callback_query: types.CallbackQuery):
    load_address_msg = await bot.send_message(text='‚ùì –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
                           chat_id=callback_query.from_user.id,
                           reply_markup=await client_ikb.ikb_cancel())
    await sqlite.dumps_message_object_in_data_base(callback_query.from_user.id, load_address_msg.message_id, 'load_address')
    await FSMClient.load_address.set()


# –í–≤–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
@dp.message_handler(state=FSMClient.load_address)
async def cmd_load_address(message: types.Message, state: FSMContext):
    await sqlite.update_address_for_user(message.from_user.id, message.text)
    load_address_msg = await sqlite.loads_message_object_from_data_base(message.from_user.id, 'load_address')
    await bot.delete_message(chat_id=message.from_user.id,
                             message_id=load_address_msg)
    await update_info_about_order(message.from_user.id)
    await message.delete()
    await state.finish()


# –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("add_order"), state='*')
async def cmd_add_order(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    # id –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–µ—â–∞–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    volume_id = callback_query.data.split('_')[2]
    # id –∑–∞–ø–∏—Å–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await sqlite.select_user_by_userid(callback_query.from_user.id)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É
    await sqlite.add_order(user, volume_id)
    info = await sqlite.select_info_by_volume_id(volume_id)
    await FSMClient.change_the_quantity.set()
    order_text = await order_view_text(callback_query.from_user.id)
    order_view_msg = await bot.send_message(text=order_text,
                                            chat_id=callback_query.from_user.id)
    leave_one = await bot.send_message(chat_id=callback_query.from_user.id,
                           text=f'''‚ùì –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —Ç–æ–≤–∞—Ä–∞
{info[0]} ({info[1]} - {info[2]}) –±–æ–ª—å—à–µ, —á–µ–º –æ–¥–Ω–∞ —à—Ç—É–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.''',
                           reply_markup= await client_ikb.leave_one())
    await sqlite.dumps_message_object_in_data_base(callback_query.from_user.id, leave_one.message_id, 'leave_one')
    await sqlite.dumps_message_object_in_data_base(callback_query.from_user.id, order_view_msg.message_id, 'order_view')


# –í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
@dp.callback_query_handler(text="leave_one", state=FSMClient.change_the_quantity)
async def cmd_change_the_quantity_one(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    order_view_msg = await sqlite.loads_message_object_from_data_base(callback_query.from_user.id, 'order_view')
    await bot.edit_message_reply_markup(callback_query.from_user.id,
                                        order_view_msg,
                                        reply_markup=await client_ikb.go_to_confirm_ikb())
    await state.finish()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ –≤—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(state=FSMClient.change_the_quantity)
async def cmd_change_the_quantity(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        return

    if int(message.text) > 99 or int(message.text) <= 0:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        return

    await message.delete()
    message_leave_one_id = await sqlite.loads_message_object_from_data_base(message.from_user.id, 'leave_one')
    # order_view = await sqlite.loads_message_object_from_data_base(message.from_user.id, 'order_view')
    await bot.delete_message(chat_id=message.from_user.id, message_id=message_leave_one_id)
    order_view_msg = await sqlite.loads_message_object_from_data_base(message.from_user.id, 'order_view')
    # await bot.delete_message(chat_id=message.from_user.id, message_id=order_view)
    user = await sqlite.select_user_by_userid(message.from_user.id)
    await sqlite.change_the_quantity_order(message.text, user)
    order_text = await order_view_text(message.from_user.id)
    await bot.edit_message_text(chat_id=message.from_user.id,
                                message_id=order_view_msg,
                                text=order_text,
                                reply_markup=await client_ikb.go_to_confirm_ikb())
    await state.finish()


@dp.callback_query_handler(Text(equals='add_product'), state='*')
async def cmd_confirm_order(callback: types.CallbackQuery):
    await func_send_catalog(callback)


@dp.callback_query_handler(Text(equals='to_leave_order'), state='*')
@dp.callback_query_handler(Text(equals='confirm_order'), state='*')
async def cmd_confirm_order(callback: types.CallbackQuery):
    try: await callback.message.delete()
    except: pass
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
    info_by_order = await sqlite.select_info_about_order_by_user_id(callback.from_user.id, all_info=True)
    order_id = info_by_order[0]
    time_change_order = info_by_order[3]
    status_order = info_by_order[4]
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
    info_about_owner_of_order = await sqlite.select_info_about_user_by_user_id(callback.from_user.id)
    name = info_about_owner_of_order[3]
    contact_number = info_about_owner_of_order[4]
    address = info_about_owner_of_order[5]
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–º–µ—Ä - (–°–µ–π—á–∞—Å, –ø–æ–∑–∞–≤—á–µ—Ä–∞, 3 –∏—é–Ω—è)
    time_change_order = await assess_time(time_change_order)
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –∑–∞–∫–∞–∑–∞
    info_by_selected_item_in_order = await order_view_text(callback.from_user.id, for_confirm_order=True)
    sum_order = info_by_selected_item_in_order[0]
    status_order = await assess_status(status_order)
    # –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∏–∑–º–µ–Ω—è–µ–º –µ—ë
    if contact_number is None or contact_number == '':
        contact_number = '<u>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω</u>'

    if name is None or name == '':
        name = '<u>–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ</u>'

    if address is None or address == '':
        address = '<u>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω</u>'
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç
    result_text = f'''
                           –ó–∞–∫–∞–∑ #{order_id} - {time_change_order}
        {sum_order} —Ä.
<u>{status_order}</u> ‚è± {time_change_order}

üìû {contact_number}
üôãüèª {name}
üè° {address}
'''
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    for item in info_by_selected_item_in_order[1:]:
        result_text += item
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    confirm_order_msg = await bot.send_message(chat_id=callback.from_user.id,
                           text=result_text,
                           parse_mode='HTML',
                           reply_markup=await client_ikb.add_info_in_profile(order_id))
    await sqlite.dumps_message_object_in_data_base(callback.from_user.id, confirm_order_msg.message_id, 'confirm_order_msg')


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('canceled_order'), state='*')
async def canceled_order(callback: types.CallbackQuery):
    await callback.message.delete()
    order_id = callback.data.split('_')[-1]
    await bot.send_message(text='–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?',
                           chat_id=callback.from_user.id,
                           reply_markup=await client_ikb.cancel_order_ikb(order_id))


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('confirm_canceled_order'), state='*')
async def confirm_canceled_order(callback: types.CallbackQuery):
    await callback.message.delete()
    order_id = callback.data.split('_')[-1]
    await sqlite.change_order_status(order_id, 'canceled')
    await callback.answer('üóë –û—Ç–º–µ–Ω–∏–ª')
    await func_send_catalog(callback)


@dp.callback_query_handler(Text('add_new_product_in_order'))
async def confirm_canceled_order(callback: types.CallbackQuery):
    await callback.message.delete()
    await func_send_catalog(callback)


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('change_quality_by'), state='*')
async def start_change_quality_by_order(callback: types.CallbackQuery):
    order_id = callback.data.split('_')[3]
    await callback.message.edit_reply_markup(reply_markup=await client_ikb.change_quality(order_id, callback.from_user.id))


@dp.callback_query_handler(Text(startswith='change_quality'))
async def change_quality_by_order_for_product(callback: types.CallbackQuery, state: FSMContext):
    await FSMClient.change_quality_by_order.set()
    async with state.proxy() as data:
        data['order_id'] = callback.data.split('_')[2]
        data['idx_product'] = callback.data.split('_')[3]
    cancel_change_msg = await bot.send_message(chat_id=callback.from_user.id,
                           text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞',
                           reply_markup=await client_ikb.ikb_cancel())
    await sqlite.dumps_message_object_in_data_base(callback.from_user.id, cancel_change_msg.message_id,
                                                   'cancel_change')


#
@dp.message_handler(state=FSMClient.change_quality_by_order)
async def change_quality_by_order(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        return

    if int(message.text) > 99 or int(message.text) <= 0:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        return

    async with state.proxy() as data:
        order_id = data['order_id']
        idx_product = data['idx_product']

    new_volume = message.text
    await sqlite.change_the_quantity_product(order_id, idx_product, new_volume)
    cancel_change_msg = await sqlite.loads_message_object_from_data_base(message.from_user.id, 'cancel_change')
    await bot.delete_message(chat_id=message.from_user.id,
                             message_id=cancel_change_msg)
    await state.finish()
    await update_info_about_order(message.from_user.id, change_quality=True)
    await message.delete()


# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
@dp.callback_query_handler(Text(startswith='start_payment'))
async def change_quality_by_order_for_product(callback: types.CallbackQuery):
    user = await sqlite.select_user_by_userid(callback.from_user.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã
    check_profile = await sqlite.check_info_profile_by_user(user)
    order_id = callback.data.split('_')[2]
    status_order = await sqlite.select_status_order_by_order_id(order_id)
    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    if check_profile == 'name':
        await callback.answer(show_alert=True,
                              text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è')

    elif check_profile == 'contact_number':
        await callback.answer(show_alert=True,
                              text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')

    elif check_profile == 'address':
        await callback.answer(show_alert=True,
                              text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å')

    elif status_order == 'verification_by_admin':
        await callback.answer(show_alert=True,
                              text='–ó–∞–∫–∞–∑ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')

    elif status_order == 'paid':
        await callback.answer(show_alert=True,
                              text='–ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω')

    elif status_order == 'received':
        await callback.answer(show_alert=True,
                              text='–ó–∞–∫–∞–∑ —É–∂–µ –ø–æ–ª—É—á–µ–Ω')

    elif status_order == 'canceled':
        await callback.answer(show_alert=True,
                              text='–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω')

    elif check_profile is True:
        # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
        await sqlite.change_order_status(order_id, 'verification_by_admin')
        await callback.message.edit_text(text=callback.message.text.replace('–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –º–∞–≥–∞–∑–∏–Ω–∞'))
        await callback.message.answer(text='–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.')
        info_by_order = callback.message.text.replace('–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –º–∞–≥–∞–∑–∏–Ω–∞')
        username = callback.from_user.username
        if username is None:
            username = callback.from_user.first_name

        msg_text = f'–ó–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –ø—Ä–∏—à–µ–ª –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n'
        msg_text += info_by_order
        await bot.send_message(chat_id=admin_id,
                               text=msg_text)


# –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π
@dp.callback_query_handler(Text(equals='start_get_received_order'))
async def change_quality_by_order_for_product(callback: types.CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id,
                           text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —ç—Ç–æ—Ç –ª–∏ –∑–∞–∫–∞–∑ –≤—ã –ø–æ–ª—É—á–∏–ª–∏?')
    msg_text = await order_view_text(callback.from_user.id, paid_order=True)
    await bot.send_message(chat_id=callback.from_user.id,
                           text=msg_text,
                           reply_markup=await client_ikb.get_received_order())


# –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑
@dp.callback_query_handler(Text(equals='get_received_order'))
async def change_quality_by_order_for_product(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await FSMClient.create_review.set()
    try: order_id = await sqlite.select_paid_order_for_user_id(callback.from_user.id)
    except: return
    await sqlite.change_order_status(order_id, 'received')
    await bot.send_message(text='–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.',
                           chat_id=callback.from_user.id)
    await bot.send_message(chat_id=callback.from_user.id,
                           text='–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ.',
                           reply_markup=await client_ikb.ikb_cancel())
    await bot.send_message(chat_id=admin_id,
                           text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –æ—Ç–º–µ—Ç–∏–ª –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä {order_id} –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π')
    async with state.proxy() as data:
        data['order_id'] = order_id


# –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
@dp.message_handler(state=FSMClient.create_review)
async def change_quality_by_order(message: types.Message, state: FSMContext):
    if message.text == '–ö–∞—Ç–∞–ª–æ–≥' or message.text == '–í–æ–ø—Ä–æ—Å—ã':
        return
    async with state.proxy() as data:
        order_id = data['order_id']
    await sqlite.create_review(order_id, message.text, message.from_user.id)
    await message.answer('–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!')
    await state.finish()
    await func_start_command(message)


def register_client_handler(dp: Dispatcher):
    dp.register_message_handler(cmd_start, state='*')













































